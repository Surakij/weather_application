{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://weather_application/./src/apiGeo.js","webpack://weather_application/./src/appCityTempIconSection.js","webpack://weather_application/./src/apiWeather.js","webpack://weather_application/./src/appMapDiv.js","webpack://weather_application/./src/helper.js","webpack://weather_application/./src/appInputListForm.js","webpack://weather_application/./src/index.js"],"sourcesContent":["export async function getCity() {\n    const response = await fetch('https://get.geojs.io/v1/ip/geo.json');\n    return await response.json();\n}","\nexport function createCityWeatherSection(city, weather) {\n\n\n    const CitTempAndIconContainer = document.createElement('section');\n    const cityName = document.createElement('h1');\n    const iconWeather = document.createElement('img');\n    const tempUnit = document.createElement('span');\n\n\n    CitTempAndIconContainer.id = 'weather_cont';\n    tempUnit.classList.add('temp');\n    iconWeather.classList.add('weather_icon');\n\n    cityName.textContent = city;\n    tempUnit.textContent = Math.floor(+weather.main.temp) - 273;\n    iconWeather.src = `https://openweathermap.org/img/w/${weather.weather[0].icon}.png`;\n\n\n    CitTempAndIconContainer.append(cityName, iconWeather, tempUnit);\n\n\nreturn CitTempAndIconContainer;\n}\n\n","export async function getWeatherData(city) {\n    try {\n        const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=ff6f06036194f66a3ce510a3e0bb0c28`);\n        return await response.json();\n    } catch (error) {\n        console.error(error);\n    }\n}\n\n\n\n","\nexport function getMap(city) {\n    const divMap = document.createElement('div');\n\n    divMap.id = 'map';\n\n    let map;\n    window.initMap = function () {\n        const geocoder = new google.maps.Geocoder();\n        map = new google.maps.Map(document.getElementById('map'), {\n            center: {lat: 0, lng: 0},\n            zoom: 10\n        });\n        geocoder.geocode({'address': city}, function (results, status) {\n            if (status === 'OK') {\n                map.setCenter(results[0].geometry.location);\n            } else {\n                alert('city not found *');\n            }\n        });\n    };\n\n    return divMap;\n}","import {createCityWeatherSection} from \"./appCityTempIconSection.js\";\nimport {getMap} from \"./appMapDiv.js\";\n\n\nexport function resetWeatherContent(city, weather) {\n\n\n    document.getElementById('map').remove();\n    document.getElementById('weather_cont').remove();\n\n    document.body.prepend(createCityWeatherSection(city, weather));\n    document.body.append(getMap(city));\n    createScriptGoogleMap ();\n}\n\nexport function createScriptGoogleMap () {\n    removeGoogleMapScript()\n    const scriptMap = document.createElement('script');\n\n    scriptMap.id = \"script_map\";\n    scriptMap.defer = true;\n    scriptMap.src = 'https://maps.googleapis.com/maps/api/js?key=AIzaSyCDjr2xBpii4hZzyM7erXc_MPO9_mufqaE&callback=initMap';\n\n    document.head.appendChild(scriptMap);\n\n}\n\nfunction removeGoogleMapScript() {\n    // console.debug('removing google script...');\n    let keywords = ['maps.googleapis'];\n\n    //Remove google from BOM (window object)\n    window.google = undefined;\n\n    //Remove google map scripts from DOM\n    let scripts = document.head.getElementsByTagName(\"script\");\n    for (let i = scripts.length - 1; i >= 0; i--) {\n        let scriptSource = scripts[i].getAttribute('src');\n        if (scriptSource != null) {\n            if (keywords.filter(item => scriptSource.includes(item)).length) {\n                scripts[i].remove();\n                // scripts[i].parentNode.removeChild(scripts[i]);\n            }\n        }\n    }\n}\n\n","import {getWeatherData} from \"./apiWeather.js\";\nimport {resetWeatherContent} from \"./helper\";\n\nexport function createForm(list) {\n\n    const searchContainer = document.createElement('form');\n    const input = document.createElement('input');\n    const button = document.createElement(\"button\");\n    const searchList = document.createElement('ul');\n\n\n    searchContainer.id = 'search_container';\n    input.classList.add('input');\n    searchList.id = 'search_list';\n\n    input.type = 'text';\n    input.placeholder = 'city name';\n    button.textContent = \"Click me\";\n    button.type = 'submit';\n\n    if (list) {\n        searchList.innerHTML = list;\n        cityReloadByClick();\n\n    }\n\n\n    searchContainer.append(input, button, searchList);\n\n    button.addEventListener('click', reloadPage);\n    // button.addEventListener('click', addList);\n\n    let error;\n\n    async function reloadPage(e) {\n        e.preventDefault();\n        if (!input.value || input.value.trim() === '' || !isNaN(Number(input.value))) {\n            alert('Please enter a city');\n            input.value = '';\n            return;\n        }\n        try {\n            const weatherData = await getWeatherData(input.value);\n            if (weatherData.message) {\n                alert(weatherData.message);\n                input.value = '';\n                error = weatherData.message;\n\n            } else {\n                resetWeatherContent(weatherData.name, weatherData);\n                console.log(error);\n                addList();\n            }\n        } catch (error) {\n            console.log(error)\n        }\n\n    }\n\n    function addList() {\n        if (searchList.querySelectorAll(\"li\").length > 9) {\n            searchList.firstElementChild.remove();\n        } else if (!input.value || input.value.trim() === '' || !isNaN(Number(input.value))) {\n            return;\n        }\n        const searchListUnit = document.createElement('li');\n        searchListUnit.innerText = input.value;\n        searchList.append(searchListUnit);\n        input.value = '';\n\n        localStorage.setItem('cityList', searchList.innerHTML);\n\n        cityReloadByClick();\n\n\n    }\n\n    function cityReloadByClick() {\n        searchList.querySelectorAll('li').forEach((item) => {\n            item.addEventListener('click', async () => {\n                try {\n                    const newWeather = await getWeatherData(item.innerText);\n                    if (newWeather.message) {\n                        alert(newWeather.message);\n                        return;\n                    }\n                    resetWeatherContent(newWeather.name, newWeather);\n                } catch (error) {\n                    console.log(error)\n                }\n\n            })\n        })\n    }\n\n    return searchContainer;\n}","import \"../css/style.css\";\nimport {getCity} from \"./apiGeo.js\"\nimport {createCityWeatherSection} from \"./appCityTempIconSection.js\";\nimport {getWeatherData} from \"./apiWeather.js\";\nimport {getMap} from \"./appMapDiv.js\";\nimport {createForm} from \"./appInputListForm.js\";\nimport {createScriptGoogleMap} from \"./helper.js\";\n\n\nconst app = async () => {\n\n    let form;\n    if (localStorage.cityList) {\n        let list = localStorage.getItem('cityList');\n        form = createForm(list);\n    } else {\n        form = createForm();\n    }\n\n    const locationData = await getCity();\n    const weatherData = await getWeatherData(locationData.city);\n    const sectionWeather = createCityWeatherSection(locationData.city, weatherData);\n    const map = getMap(locationData.city);\n\n\n    document.body.append(sectionWeather, form, map);\n    createScriptGoogleMap();\n\n\n}\n\napp();\n\n"],"names":["getCity","fetch","response","json","createCityWeatherSection","city","weather","CitTempAndIconContainer","document","createElement","cityName","iconWeather","tempUnit","id","classList","add","textContent","Math","floor","main","temp","src","icon","append","getWeatherData","console","error","getMap","map","divMap","window","initMap","geocoder","google","maps","Geocoder","Map","getElementById","center","lat","lng","zoom","geocode","results","status","setCenter","geometry","location","alert","resetWeatherContent","remove","body","prepend","createScriptGoogleMap","keywords","undefined","scripts","head","getElementsByTagName","i","scriptSource","getAttribute","filter","item","includes","length","removeGoogleMapScript","scriptMap","defer","appendChild","createForm","list","searchContainer","input","button","searchList","e","preventDefault","value","trim","isNaN","Number","weatherData","message","name","log","addList","querySelectorAll","firstElementChild","searchListUnit","innerText","localStorage","setItem","innerHTML","cityReloadByClick","forEach","addEventListener","newWeather","type","placeholder","app","cityList","getItem","form","locationData","sectionWeather"],"sourceRoot":""}