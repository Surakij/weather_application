{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://weather_application/./src/apiGeo.js","webpack://weather_application/./src/appCityTempIconSection.js","webpack://weather_application/./src/apiWeather.js","webpack://weather_application/./src/appMapDiv.js","webpack://weather_application/./src/helper.js","webpack://weather_application/./src/appInputListForm.js","webpack://weather_application/./src/index.js"],"sourcesContent":["export async function getCity() {\n    const response = await fetch('https://get.geojs.io/v1/ip/geo.json');\n    return await response.json();\n}","\nexport function createCityWeatherSection(city, weather) {\n\n\n    const CitTempAndIconContainer = document.createElement('section');\n    const cityName = document.createElement('h1');\n    const iconWeather = document.createElement('img');\n    const tempUnit = document.createElement('span');\n\n\n    CitTempAndIconContainer.id = 'weather_cont';\n    tempUnit.classList.add('temp');\n    iconWeather.classList.add('weather_icon');\n\n    cityName.textContent = city;\n    tempUnit.textContent = Math.floor(+weather.main.temp) - 273;\n    iconWeather.src = `https://openweathermap.org/img/w/${weather.weather[0].icon}.png`;\n\n\n    CitTempAndIconContainer.append(cityName, tempUnit, iconWeather);\n\n\nreturn CitTempAndIconContainer;\n}\n\n","export async function getWeatherData(city) {\n    try {\n        const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=ff6f06036194f66a3ce510a3e0bb0c28`);\n        return await response.json();\n    } catch (error) {\n        console.error('error' + error);\n    }\n}\n\n\n\n","export function getMap(city) {\n    const divMap = document.createElement('div');\n    const scriptMap = document.createElement('script');\n\n    divMap.id = 'map';\n    document.head.appendChild(scriptMap);\n\n    scriptMap.async = true;\n    scriptMap.defer = true;\n    scriptMap.src = 'https://maps.googleapis.com/maps/api/js?key=AIzaSyCDjr2xBpii4hZzyM7erXc_MPO9_mufqaE&callback=initMap';\n\n\n    window.initMap = function () {\n        const geocoder = new google.maps.Geocoder();\n        const map = new google.maps.Map(document.getElementById('map'), {\n            center: {lat: 0, lng: 0},\n            zoom: 10\n        });\n        geocoder.geocode({'address': city}, function (results, status) {\n            if (status === 'OK') {\n                map.setCenter(results[0].geometry.location);\n            } else {\n                alert('Geocode was not successful for the following reason: ' + status);\n            }\n        });\n    };\n\n    return divMap;\n}","import {createCityWeatherSection} from \"./appCityTempIconSection.js\";\nimport {getMap} from \"./appMapDiv.js\";\n\n\nexport function resetWeatherContent(city, weather) {\n\n    document.getElementById('map').remove();\n    document.getElementById('weather_cont').remove();\n\n\n    document.body.append(getMap(city));\n    document.body.prepend(createCityWeatherSection(city, weather));\n}\n\n","import {getWeatherData} from \"./apiWeather.js\";\nimport {resetWeatherContent} from \"./helper\";\n\nexport function createForm(list) {\n\n    const searchContainer = document.createElement('form');\n    const input = document.createElement('input');\n    const button = document.createElement(\"button\");\n    const searchList = document.createElement('ul');\n\n\n    searchContainer.id = 'search_container';\n    input.classList.add('input');\n    searchList.id = 'search_list';\n\n    input.type = 'text';\n    input.placeholder = 'city name';\n    button.textContent = \"Click me\";\n    button.type = 'submit';\n\n    if (list) {\n        searchList.innerHTML = list;\n        cityReloadByClick();\n\n    }\n\n\n    searchContainer.append(input, button, searchList);\n\n    button.addEventListener('click', reloadPage);\n    button.addEventListener('click', addList);\n\n\n    async function reloadPage(e) {\n        e.preventDefault();\n        if (!input.value || input.value.trim() === '' ||  !isNaN(Number(input.value))) {\n            alert('Please enter a city');\n            input.value = '';\n            return;\n        } else {\n            const newWeather = await getWeatherData(input.value);\n            resetWeatherContent(newWeather.name, newWeather);\n        }\n    }\n\n\n    function addList() {\n        if (searchList.querySelectorAll(\"li\").length > 9) {\n            searchList.firstElementChild.remove();\n        } else if (!input.value || input.value.trim() === ''|| !isNaN(Number(input.value))) {\n            return;\n        }\n        const searchListUnit = document.createElement('li');\n        searchListUnit.innerText = input.value;\n        searchList.append(searchListUnit);\n        input.value = '';\n\n        localStorage.setItem('cityList', searchList.innerHTML);\n\n        cityReloadByClick();\n\n\n    }\n\n    function cityReloadByClick() {\n        searchList.querySelectorAll('li').forEach((item) => {\n            item.addEventListener('click', async () => {\n                const newWeather = await getWeatherData(item.innerText);\n                resetWeatherContent(newWeather.name, newWeather);\n            })\n        })\n    }\n\n    return searchContainer;\n}","import \"../css/style.css\";\nimport {getCity} from \"./apiGeo.js\"\nimport {createCityWeatherSection} from \"./appCityTempIconSection.js\";\nimport {getWeatherData} from \"./apiWeather.js\";\nimport {getMap} from \"./appMapDiv.js\";\nimport {createForm} from \"./appInputListForm.js\";\n\n\nconst app = async () => {\n\n    let form;\n    if (localStorage.cityList) {\n        let list = localStorage.getItem('cityList');\n        form = createForm(list);\n    } else {\n        form = createForm();\n    }\n\n    const locationData = await getCity();\n    const weatherData = await getWeatherData(locationData.city);\n    const sectionWeather = createCityWeatherSection(locationData.city, weatherData);\n    const map = getMap(locationData.city);\n\n\n    document.body.append(sectionWeather, form, map);\n\n}\n\napp();\n\n"],"names":["getCity","fetch","response","json","createCityWeatherSection","city","weather","CitTempAndIconContainer","document","createElement","cityName","iconWeather","tempUnit","id","classList","add","textContent","Math","floor","main","temp","src","icon","append","getWeatherData","console","error","getMap","divMap","scriptMap","head","appendChild","async","defer","window","initMap","geocoder","google","maps","Geocoder","map","Map","getElementById","center","lat","lng","zoom","geocode","results","status","setCenter","geometry","location","alert","resetWeatherContent","remove","body","prepend","i","createForm","list","searchContainer","input","button","searchList","e","preventDefault","value","trim","isNaN","Number","newWeather","name","cityReloadByClick","querySelectorAll","forEach","item","addEventListener","innerText","type","placeholder","innerHTML","length","firstElementChild","searchListUnit","localStorage","setItem","app","cityList","getItem","form","locationData","weatherData","sectionWeather"],"sourceRoot":""}